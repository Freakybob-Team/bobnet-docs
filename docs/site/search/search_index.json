{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BobNet Docs [ Get BobNet : https://github.com/Freakybob-Team/bobnet ] This is the home of BobNet docs! This documentation is designed for developers and users alike. However, it will mainly focus on developer tools. Click here to get started with BobNet!","title":"Home"},{"location":"#bobnet-docs","text":"[ Get BobNet : https://github.com/Freakybob-Team/bobnet ] This is the home of BobNet docs! This documentation is designed for developers and users alike. However, it will mainly focus on developer tools. Click here to get started with BobNet!","title":"BobNet Docs"},{"location":"getstarted/","text":"Getting Started To get started with BobNet, download a client of your choice. At the moment, BobNet Web (by us) is the only choice. The first site you should visit is hi.bob, which has credits and lets you know its working. Next, do whatever you'd like. BobNet is at an early stage in its development, and currently is designed for developers, not end-users.","title":"Get Started"},{"location":"getstarted/#getting-started","text":"To get started with BobNet, download a client of your choice. At the moment, BobNet Web (by us) is the only choice. The first site you should visit is hi.bob, which has credits and lets you know its working. Next, do whatever you'd like. BobNet is at an early stage in its development, and currently is designed for developers, not end-users.","title":"Getting Started"},{"location":"usecheck/","text":"Use Check Check is a tool that checks if a domain exists in a BobNet JSON. There are two versions: a module version and a standalone tool. For developers, use module. For users, use standalone. This guide is designed for developers. For users, follow the instruction told in standalone. In order to use checkmod, aka Check Module, you must pass a variable named domain into the checkmod.checkForURL() function. Here's an example: import checkmod domain = \"hi.bob\" checkmod.checkForURL(domain) if checkmod.isExist == True: print(\"hi.bob does exist!\") else: print(\"hi.bob doesnt exist!\") It passed the domain named hi.bob, and sees if it exists. If it exist, it prints that it exists. An implementation you could potentially do is something like this: - See what URL the user inputs - Check if URL is real with checkmod - Go to URL","title":"Use Check"},{"location":"usecheck/#use-check","text":"Check is a tool that checks if a domain exists in a BobNet JSON. There are two versions: a module version and a standalone tool. For developers, use module. For users, use standalone. This guide is designed for developers. For users, follow the instruction told in standalone. In order to use checkmod, aka Check Module, you must pass a variable named domain into the checkmod.checkForURL() function. Here's an example: import checkmod domain = \"hi.bob\" checkmod.checkForURL(domain) if checkmod.isExist == True: print(\"hi.bob does exist!\") else: print(\"hi.bob doesnt exist!\") It passed the domain named hi.bob, and sees if it exists. If it exist, it prints that it exists. An implementation you could potentially do is something like this: - See what URL the user inputs - Check if URL is real with checkmod - Go to URL","title":"Use Check"},{"location":"usemyjson/","text":"Use custom JSON Custom JSON support is implemented in all official clients. In order to make your own JSON, you need: - Something that lets you deploy websites (ex: GitHub Pages) - JSON knowledge Ready? First, make a folder. Name it anything you want, it doesn't matter, as long as you can deploy it to the internet. Create a JSON file. Call it anything you want, it doesn't matter. Next, you can start making your JSON! It needs to be a specific structure for our clients. Here's an example (which is the official JSON from 9/28/25): { \"sitelink\": [\"intro_site/bob.html\", \"know_your_stuff/index.html\", \"https://freakybob.site\", \"https://fs.freakybob.site\", \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"], \"sitename\": [\"hi.bob\", \"know.bob\", \"freaky.link.bob\", \"fs.link.bob\", \"rick.roll\"] } As you can see, the sitelink that's 1st goes with the 1st sitename (ex: intro_site/bob.html is 1st sitelink, and hi.bob is 1st sitename). You can set it up like that, and you'll have a compatible JSON. You can deploy it to the internet in any way you'd like, but we use GitHub Pages . Last, you can use it on supported clients. For our client, you can click \"use custom JSON source (for experienced users)\" and put in your URL. Notice Custom JSON in our web client has not been tested yet. If you experience problems, report an issue .","title":"Use Custom JSON"},{"location":"usemyjson/#use-custom-json","text":"Custom JSON support is implemented in all official clients. In order to make your own JSON, you need: - Something that lets you deploy websites (ex: GitHub Pages) - JSON knowledge Ready? First, make a folder. Name it anything you want, it doesn't matter, as long as you can deploy it to the internet. Create a JSON file. Call it anything you want, it doesn't matter. Next, you can start making your JSON! It needs to be a specific structure for our clients. Here's an example (which is the official JSON from 9/28/25): { \"sitelink\": [\"intro_site/bob.html\", \"know_your_stuff/index.html\", \"https://freakybob.site\", \"https://fs.freakybob.site\", \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"], \"sitename\": [\"hi.bob\", \"know.bob\", \"freaky.link.bob\", \"fs.link.bob\", \"rick.roll\"] } As you can see, the sitelink that's 1st goes with the 1st sitename (ex: intro_site/bob.html is 1st sitelink, and hi.bob is 1st sitename). You can set it up like that, and you'll have a compatible JSON. You can deploy it to the internet in any way you'd like, but we use GitHub Pages . Last, you can use it on supported clients. For our client, you can click \"use custom JSON source (for experienced users)\" and put in your URL. Notice Custom JSON in our web client has not been tested yet. If you experience problems, report an issue .","title":"Use custom JSON"}]}